using System.Linq;
using Acidmanic.Utilities.Reflection;
using Acidmanic.Utilities.Reflection.FieldInclusion;
using Acidmanic.Utilities.Reflection.ObjectTree;
using EnTier.DataAccess.Meadow.GenericCrudRequests;
using EnTier.Repositories.Models;
using Meadow.Contracts;

namespace EnTier.DataAccess.Meadow.GenericEventStreamRequests;

public sealed class
    InsertEventRequest<TEvent, TEventId, TStreamId> :
        EventStreamRequestBase<TEvent, TEventId, TStreamId, ObjectEntry<TEventId, TStreamId>>
{
    public InsertEventRequest(ObjectEntry<TEventId, TStreamId> entry)
    {
        ToStorage = entry;
    }

    protected override void OnFieldManipulation(IFieldInclusionMarker toStorage,
        IFieldInclusionMarker fromStorage)
    {
        base.OnFieldManipulation(toStorage, fromStorage);

        var entityType = typeof(ObjectEntry<TEventId, TStreamId>);

        var evaluator = new ObjectEvaluator(entityType);

        var autogeneratedFields = TypeIdentity.GetAutoGeneratedLeaves(entityType)
            .Select(leaf =>
            {
                var uKey = evaluator.FindCorrespondingKey(leaf);

                return new ExpectedFieldProperties(leaf, uKey);
            })
            .ToList();

        if (autogeneratedFields.Count > 0)
        {
            autogeneratedFields.ForEach(f => toStorage.Exclude(f.Key));
        }
    }


    protected override string PickName(NameConvention nameConvention)
    {
        return nameConvention.InsertEvent;
    }
}