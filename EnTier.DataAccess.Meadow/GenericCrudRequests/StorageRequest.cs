using System;
using System.Collections.Generic;
using System.Linq;
using Acidmanic.Utilities.Reflection;
using Acidmanic.Utilities.Reflection.ObjectTree;
using Acidmanic.Utilities.Reflection.ObjectTree.FieldAddressing;
using Meadow.Contracts;
using Meadow.Extensions;
using Meadow.Requests;

namespace EnTier.DataAccess.Meadow.GenericCrudRequests
{
    public abstract class StorageRequest<TStorageIn, TStorageOut> : MeadowRequest<TStorageIn, TStorageOut>
        where TStorageOut : class, new()
    {
        
        protected Type EntityType { get; }

        protected NameConvention NameConvention => Configuration.GetNameConvention(EntityType);


        internal ExpectedFieldProperties IdField { get; }

        internal List<ExpectedFieldProperties> AutogeneratedFields { get; }

        //Main Construction Entry
        public StorageRequest(Type entityTypeType) : base(true)
        {
            EntityType = entityTypeType;

            var evaluator = new ObjectEvaluator(entityTypeType);

            var idLeaf = TypeIdentity.FindIdentityLeaf(entityTypeType);

            FieldKey idKey = evaluator.FindCorrespondingKey(idLeaf);

            IdField = new ExpectedFieldProperties(idLeaf, idKey);

            AutogeneratedFields = TypeIdentity.GetAutoGeneratedLeaves(entityTypeType)
                .Select(leaf =>
                {
                    var uKey = evaluator.FindCorrespondingKey(leaf);

                    return new ExpectedFieldProperties(leaf, uKey);
                })
                .ToList();
        }

        protected abstract string PickProcedureName(NameConvention nameConvention);

        public override string RequestText
        {
            get { return PickProcedureName(NameConvention); }
            protected set { }
        }

        protected override bool FullTreeReadWrite()
        {
            return false;
        }
    }
}