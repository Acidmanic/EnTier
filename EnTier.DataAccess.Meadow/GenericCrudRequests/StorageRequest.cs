using System;
using System.Collections.Generic;
using System.Linq;
using Acidmanic.Utilities.Reflection;
using Acidmanic.Utilities.Reflection.Extensions;
using Acidmanic.Utilities.Reflection.ObjectTree;
using Acidmanic.Utilities.Reflection.ObjectTree.FieldAddressing;
using EnTier.Utility;
using Meadow.Reflection.Conventions;
using Meadow.Requests;

namespace EnTier.DataAccess.Meadow.GenericCrudRequests
{
    public abstract class StorageRequest<TStorageIn, TStorageOut> : MeadowRequest<TStorageIn, TStorageOut>
        where TStorageOut : class, new()
    {
        protected NameConvention NameConvention { get; }


        internal ExpectedFieldProperties IdField { get; }

        internal List<ExpectedFieldProperties> AutogeneratedFields { get; }

        //Main Construction Entry
        public StorageRequest(Type entityType) : base(true)
        {
            NameConvention = new NameConvention(entityType);

            var evaluator = new ObjectEvaluator(entityType);
            
            var idLeaf = TypeIdentity.FindIdentityLeaf(entityType);

            FieldKey idKey = evaluator.FindCorrespondingKey(idLeaf);
            
            IdField = new ExpectedFieldProperties(idLeaf,idKey);

            AutogeneratedFields = TypeIdentity.GetAutoGeneratedLeaves(entityType)
                .Select(leaf =>
                {
                    var uKey = evaluator.FindCorrespondingKey(leaf);
                    
                    return new ExpectedFieldProperties(leaf,uKey);
                    
                })
                .ToList();
        }

        protected abstract string PickProcedureName(NameConvention nameConvention);

        public override string RequestText
        {
            get
            {
                return PickProcedureName(NameConvention);
            }
            protected set{}
        }

        protected override bool FullTreeReadWrite()
        {
            return false;
        }
    }
}