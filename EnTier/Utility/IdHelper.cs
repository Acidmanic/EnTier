using System;
using System.Collections.Generic;
using System.Linq;
using Acidmanic.Utilities.Reflection.ObjectTree;

namespace EnTier.Utility
{
    public static class IdHelper
    {
        
        public static AccessNode GetIdLeaf<TEntity, TId>()
        {
            var idLeaf = GetAutoGeneratedLeaf<TEntity, TId>();

            if (idLeaf != null)
            {
                return idLeaf;
            }
            var idType = typeof(TId);

            idLeaf = GetUniqueLeaves<TEntity>()
                    .FirstOrDefault(l => l.Type == idType);

            if (idLeaf != null)
            {
                return idLeaf;
            }
            
            idLeaf = GetLeafByName<TEntity>("Id","ID","id","iD")
                .FirstOrDefault(l => l.Type == idType);

            return idLeaf;
        }

        
        public static IEnumerable<AccessNode> GetLeafByName<TEntity>(params string[] acceptableNames)
        {

            return GetLeafByName(typeof(TEntity), acceptableNames);
        }
        
        public static IEnumerable<AccessNode> GetLeafByName(Type type, params string[] acceptableNames)
        {

            return GetLeaves(type,l => acceptableNames.Contains(l.Name));
        }
        
        public static AccessNode GetAutoGeneratedLeaf<TEntity, TId>()
        {
            var idType = typeof(TId);
            
            return GetLeaves<TEntity>(l => l.IsAutoValued && l.Type == idType)
                .FirstOrDefault();
        }
        
        public static AccessNode GetAutoGeneratedLeaf(Type type)
        {
            
            return GetLeaves(type,l => l.IsAutoValued)
                .FirstOrDefault();
        }
        
        
        public static IEnumerable<AccessNode> GetUniqueLeaves<TEntity>()
        {
            return GetUniqueLeaves(typeof(TEntity));
        }
        
        public static IEnumerable<AccessNode> GetUniqueLeaves(Type type)
        {
            return GetLeaves(type,l => l.IsAutoValued );
        }

        private static IEnumerable<AccessNode> GetLeaves<TEntity>(Func<AccessNode, bool> selector)
        {
            var accessNode = ObjectStructure.CreateStructure<TEntity>(false);
            
            var leaves = accessNode
                .EnumerateLeavesBelow()
                .Where(selector);

            return leaves;
        }
       
        public static AccessNode GetIdLeaf(Type entityType)
        {
            var idLeaf = GetAutoGeneratedLeaf(entityType);

            if (idLeaf != null)
            {
                return idLeaf;
            }

            var idNames = new string[] {"Id", "ID", "id", "iD"};
            
            idLeaf = GetUniqueLeaves(entityType)
                .FirstOrDefault(l => idNames.Contains(l.Name));

            if (idLeaf != null)
            {
                return idLeaf;
            }
            
            idLeaf = GetLeafByName(entityType, idNames).FirstOrDefault();

            if (idLeaf != null)
            {
                return idLeaf;
            }
            
            idLeaf = GetUniqueLeaves(entityType)
                .FirstOrDefault();
            
            return idLeaf;
        }
        
        private static IEnumerable<AccessNode> GetLeaves(Type entityType, Func<AccessNode, bool> selector)
        {
            var accessNode = ObjectStructure.CreateStructure( entityType,false);
            
            var leaves = accessNode
                .EnumerateLeavesBelow()
                .Where(selector);

            return leaves;
        }
        
    }
}